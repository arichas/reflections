What happens when you initialize a repository? Why do you need to do it?
The .git file is added to the respository upon initialization. Without this file, which is hidden, it will not be recognized as a git repository, and the power of git will go unleashed.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area has changes in it that have yet to be committed. This gives us the chance to review changes before committing.

How can you use the staging area to make sure you have one commit per logical change?
The staging area can accomodate multiple files, each with small changes that together comprise a logical change worth committing.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
It would be helpful to have branches when significant changes are being implemented, such as experimental features or new languages.

How do the diagrams help you visualize the branch structure?
Diagrams show commits on each branch, and which ones may not be reachable, and therefore not listed in a particular git log.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Following a merge, commits from both branches are located on the branch that was checked out at time of merge, assuming that branch's label.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging saves a lot of time, while the manual process will ensure code from all contributors is seen, checked, and understood.

Commands:

git add  |    Add a file to the staging area
git branch | shows current branches
git branch -d name  |    Remove the branch with the specified name
git branch name | creates a new branch called name
git checkout -b new_branch_name  |  Creates a new branch and checks it out instead of git branch new_branch_name and git checkout new_branch_name
git checkout master  |    Restore the "Head" to the latest check-in
git commit  |    Commit the files from the staging area to the repository
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git gc  |  manually run garbage collection
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1. The label of the checked-out branch will be used.
git reset --hard  |    Undo all changes from both working directory and staging area!
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository